Metadata-Version: 2.4
Name: llm-safecall
Version: 0.1.0
Summary: Safely call LLMs with validation, retries, and observability.
Author: Your Name
License: MIT
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pydantic>=2.7
Requires-Dist: tenacity>=9.0
Requires-Dist: typing-extensions>=4.10
Provides-Extra: openai
Requires-Dist: openai>=1.50.0; extra == "openai"
Provides-Extra: anthropic
Requires-Dist: anthropic>=0.34; extra == "anthropic"
Provides-Extra: dev
Requires-Dist: pytest>=8.2; extra == "dev"
Requires-Dist: pytest-cov>=5.0; extra == "dev"
Requires-Dist: ruff>=0.6; extra == "dev"
Requires-Dist: mypy>=1.11; extra == "dev"
Dynamic: license-file

# llm-safecall

A tiny but opinionated wrapper to make LLM calls **safe, validated, and observable**.

## Features
- Timeouts, retries, and simple circuit breaking
- Input/output moderation hooks
- Optional PII redaction (`email`, `phone`)
- Pydantic schema validation (with 1-pass auto-repair)
- Pluggable providers (OpenAI, Anthropic, Mock)
- Simple caching and per-call report (latency, tokens est., cost est.)

## Quickstart
```bash
pip install -e ".[dev]"   # for local dev
# optional: provider extras
pip install ".[openai]"   # or ".[anthropic]"
```

```python
from pydantic import BaseModel
from llm_safecall import SafeCall, MockProvider

class FlightPlan(BaseModel):
    origin: str
    destination: str
    depart_date: str  # ISO
    airline: str | None = None

safe = SafeCall(
    llm=MockProvider(),              # swap to a real provider later
    output=FlightPlan,
    temperature=0.2,
    timeout_s=10,
    retries=2,
    moderation=True,
    redact=["email", "phone"]
)

result = safe.generate("Plan a cheap flight from Berlin to Tokyo next month as JSON.")
print(result.model_dump())  # validated pydantic model
print(result._report.model_dump())  # latency and token estimates
```

## Providers
Swap `MockProvider()` with `OpenAIProvider(model="gpt-4o-mini")` or `AnthropicProvider(model="claude-3-5-sonnet")`.
Provide API keys via env vars if needed (e.g., `OPENAI_API_KEY`).

## Testing
```bash
pytest
```

## CI
Github Actions workflow is included in `.github/workflows/ci.yml`.

## License
MIT
